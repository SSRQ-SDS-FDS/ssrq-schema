<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://jenkins.tei-c.org/job/TEIP5-dev/lastSuccessfulBuild/artifact/P5/release/xml/tei/odd/p5.nvdl"
        type="application/xml"
        schematypens="http://purl.oclc.org/dsdl/nvdl/ns/structure/1.0"?>
<div xmlns="http://www.tei-c.org/ns/1.0" xmlns:sch="http://purl.oclc.org/dsdl/schematron">
  <specGrp xml:id="constraints">
    <constraintSpec xml:lang="en" scheme="schematron" ident="sch-att-calendar">
      <desc xml:lang="en" versionDate="2025-01-28">constraint to check the usage of dating attributes</desc>
      <constraint>
        <sch:pattern>
          <sch:rule context="tei:*[@calendar]">
            <sch:assert test=".[@when-custom|@notBefore-custom|@notAfter-custom|@from-custom|@to-custom]">
                More attributes must be used together with @calendar to specify the date.
            </sch:assert>
          </sch:rule>
          <sch:rule context="tei:*[@when-custom|@notBefore-custom|@notAfter-custom|@from-custom|@to-custom][not(ancestor::tei:publicationStmt)]">
            <sch:assert test=".[@calendar]">
              @calendar must be used, when either @when-custom, @from-custom, @to-custom,
              @notAfter-custom or @notBefore-custom is used.
            </sch:assert>
          </sch:rule>
        </sch:pattern>
      </constraint>
    </constraintSpec>
    <constraintSpec xml:lang="en" scheme="schematron" ident="sch-att-data-custom">
      <desc xml:lang="en" versionDate="2025-01-28">constraint to check the usage of custom dating attributes</desc>
      <constraint>
        <sch:pattern>
          <sch:rule context="tei:*[@when-custom]">
            <sch:report test="@notBefore-custom|@notAfter-custom|@from-custom|@to-custom">
                @when-custom cannot be used together with @notBefore-custom, @notAfter-custom, @from-custom or @to-custom.
            </sch:report>
          </sch:rule>
          <sch:rule context="tei:*[@from-custom or @to-custom]">
            <sch:assert test="@from-custom and @to-custom">
                @from-custom and @to-custom must always be used together.
            </sch:assert>
            <sch:report test="@notBefore-custom|@notAfter-custom">
                The usage of @notBefore-custom and @notAfter-custom is not allowed together with @from-custom and @to-custom.
            </sch:report>
            <sch:assert test="if (matches(@from-custom, '^\d{4}-\d{2}-\d{2}$') and matches(@from-custom, '^\d{4}-\d{2}-\d{2}$')) then (number(translate(@to-custom, '-', '')) - number(translate(@from-custom, '-', ''))) &gt; 0 else true()">
                Invalid timespan: @to-custom must be a point later in time than @from-custom.
            </sch:assert>
          </sch:rule>
        </sch:pattern>
      </constraint>
    </constraintSpec>
    <constraintSpec xml:lang="en" scheme="schematron" ident="sch-att-dimensions">
      <desc xml:lang="en" versionDate="2025-01-28">constraint to check the usage of @quantity and @unit</desc>
      <constraint>
        <sch:pattern>
          <sch:rule context="tei:*[@unit='unknown']">
            <sch:assert test="./@quantity='unknown'" xml:lang="en">
              If @unit has the value 'unknown', @quantity must be 'unknown' too.
            </sch:assert>
          </sch:rule>
          <sch:rule context="tei:*[@unit or @quantity]">
            <sch:assert test="@quantity and @unit" xml:lang="en">
                @unit and @quantity must be used together.
            </sch:assert>
          </sch:rule>
        </sch:pattern>
      </constraint>
    </constraintSpec>
    <constraintSpec xml:lang="en" scheme="schematron" ident="sch-att-dimensions-2">
      <desc xml:lang="en" versionDate="2025-01-28">constraint to prevent that quantity is zero</desc>
      <constraint>
        <sch:pattern>
          <!-- Testing for integer (0) and float (0.0) values -->
          <sch:rule context="tei:*[number(@quantity)=0 or number(@quantity)=0.0]">
            <sch:report test="not(@type='currency')" xml:lang="en">
                @quantity may only be zero, if it occurs in combination with @type="currency".
            </sch:report>
          </sch:rule>
        </sch:pattern>
      </constraint>
    </constraintSpec>
    <constraintSpec xml:lang="en" scheme="schematron" ident="sch-att-spanTo">
      <desc xml:lang="en" versionDate="2025-01-28">constraint to check the usage of @spanTo</desc>
      <constraint>
        <sch:rule context="tei:*[@spanTo]">
          <sch:assert test="id(@spanTo) and following::*[@xml:id=(current()/@spanTo)]">
            The element indicated by @spanTo (<sch:value-of select="@spanTo"/>) must occur after the current element <sch:name/>.
          </sch:assert>
        </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec xml:lang="en" scheme="schematron" ident="sch-att-facs">
      <desc xml:lang="en" versionDate="2025-01-28">constraint to ensure the pattern of facsimile names</desc>
      <constraint>
        <sch:pattern>
          <sch:rule context="*[@facs]">
            <sch:report test="matches(@facs, '__')" xml:lang="en">
              An underscore should not be followed by another underscore in @facs.
            </sch:report>
          </sch:rule>
        </sch:pattern>
      </constraint>
    </constraintSpec>
    <constraintSpec xml:lang="en" scheme="schematron" ident="sch-att-wit">
      <desc xml:lang="en" versionDate="2025-01-28">constraint to check the reference of @wit</desc>
      <constraint>
        <sch:pattern>
          <sch:rule context="tei:*[@wit]">
            <sch:let name="wits" value="for $wit in tokenize(@wit, ' ') return tokenize($wit, '#')[1]"/>
            <!--  This rule is introduced, because @wit should not point to any other element
                  type than witness or bibl, and this: <anyElement xml:id="foo"/> <rdg wit="foo"/>
                  should not be valid. -->
            <sch:assert test="every $wit in $wits satisfies id($wit)/name() = ('bibl', 'witness')" xml:lang="en">
                Every referenced ID in @wit must belong to a tei:witness or tei:bibl element.
            </sch:assert>
          </sch:rule>
        </sch:pattern>
      </constraint>
    </constraintSpec>
    <constraintSpec xml:lang="en" scheme="schematron" ident="sch-att-hand">
      <desc xml:lang="en" versionDate="2025-01-28">constraint to check the reference of @hand</desc>
      <constraint>
        <sch:pattern>
          <sch:rule context="tei:*[@hand]">
            <sch:let name="handNoteRef" value="@hand"/>
            <sch:assert test="exists(id($handNoteRef)) and id($handNoteRef)/name() = 'handNote'">
                The referenced ID in @hand must belong to a tei:handNote element.
              </sch:assert>
          </sch:rule>
        </sch:pattern>
      </constraint>
    </constraintSpec>
    <constraintSpec xml:lang="en" scheme="schematron" ident="sch-trim-attributes">
      <desc xml:lang="en" versionDate="2025-01-28">constraint to trim any attribute value</desc>
      <constraint>
        <sch:pattern>
          <sch:rule context="@*">
            <sch:report test="matches(., '^(\s+|\t+|\n)(.*)$')" xml:lang="en">
              The value of <sch:name/> should not start with whitespace.
            </sch:report>
            <sch:report test="matches(., '^(.*)(\s+|\t+|\n)$')" xml:lang="en">
              The value of <sch:name/> should not end with whitespace.
            </sch:report>
          </sch:rule>
        </sch:pattern>
      </constraint>
    </constraintSpec>
    <constraintSpec xml:lang="en" scheme="schematron" ident="sch-duplicate-attribute-values">
      <desc xml:lang="en" versionDate="2025-01-28">constraint to ensure that no attribute has duplicate values</desc>
      <constraint>
        <sch:pattern>
          <sch:rule context="@*">
            <sch:assert test="count(distinct-values(tokenize(.))) = count(tokenize(.))">
              An attribute should not have duplicate values.
            </sch:assert>
          </sch:rule>
        </sch:pattern>
      </constraint>
    </constraintSpec>
    <constraintSpec xml:lang="en" scheme="schematron" ident="sch-non-empty-elements">
      <desc xml:lang="en" versionDate="2025-01-28">constraint to ensure the usage of text in elements</desc>
      <constraint>
        <sch:pattern>
          <sch:rule context="tei:*[name() = ('ab', 'abbr', 'add', 'additional', 'author', 'availability', 'bibl', 'body', 'custEvent', 'custodialHist', 'del', 'dimensions', 'div', 'docImprint', 'editorialDecl', 'encodingDesc', 'expan', 'extent', 'foreign', 'fw', 'handDesc', 'head', 'hi', 'history', 'idno', 'item', 'keywords', 'label', 'lem', 'licence', 'list', 'listBibl', 'listWit', 'measure', 'measureGrp', 'msContents', 'msItem', 'note', 'num', 'objectDesc', 'orgName', 'orig', 'origPlace', 'p', 'persName', 'physDesc', 'placeName', 'publicationStmt', 'publisher', 'pubPlace', 'q', 'quote', 'repository', 'resp', 'respStmt', 'row', 'sealDesc', 'seg', 'settlement', 'sic', 'signed', 'sourceDesc', 'subst', 'summary', 'supplied', 'support', 'supportDesc', 'table', 'TEI', 'teiHeader', 'text', 'textClass', 'time', 'title', 'unclear', 'witness')][not(*)]">
            <sch:assert test="string-length(normalize-space(.)) &gt; 0">
              The element <sch:name/> must not be empty.
            </sch:assert>
          </sch:rule>
        </sch:pattern>
      </constraint>
    </constraintSpec>
    <constraintSpec xml:lang="en" scheme="schematron" ident="non-breaking-whitespace">
      <desc xml:lang="en" versionDate="2025-01-28">constraint to forbid non-breaking space</desc>
      <constraint>
        <sch:pattern>
          <sch:rule context="text()">
            <sch:report role="warning" test="matches(., 'Â ')">
              It is not allowed to use a non-breaking space in the text.
            </sch:report>
          </sch:rule>
        </sch:pattern>
      </constraint>
    </constraintSpec>
  </specGrp>
</div>
